// https://learnopengl.com/Guest-Articles/2021/Tessellation/Tessellation
// tessellation control shader
#version 410 core

// specify number of control points per patch output
// this value controls the size of the input and output arrays
layout (vertices=4) out;

uniform sampler2D tessLevels;  // the tesselation level for each patch

// varying input from vertex shader
in vec2 TexCoord[];
// varying output to evaluation shader
out vec2 TextureCoord[];

uniform mat4 model;
uniform mat4 view;

void main()
{
    // ----------------------------------------------------------------------
    // pass attributes through
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    TextureCoord[gl_InvocationID] = TexCoord[gl_InvocationID];

    // ----------------------------------------------------------------------
    // invocation zero controls tessellation levels for the entire patch
    if(gl_InvocationID == 0)
    {
        // ----------------------------------------------------------------------
        // Get the center of the quad and sample the tesselation level image
        vec2 avgTexCoord = (TexCoord[0] + TexCoord[1] + TexCoord[2] + TexCoord[3]) / 4;
        vec2 size = abs(avgTexCoord - TexCoord[0])*2.0;

        // Step 1: define constants to control tessellation parameters
        // set these as desired for your world scale
        int MIN_TESS_LEVEL = int(texture(tessLevels, avgTexCoord).r*255.0);
        const int MAX_TESS_LEVEL = 32;
        const float MIN_DISTANCE = 100;
        const float MAX_DISTANCE = 400;
        
        float PATCH_WIDTH  = size.x;
        float PATCH_HEIGHT = size.y;

        int EAST_MIN_TESS_LEVEL   = int(texture(tessLevels, avgTexCoord+vec2(-PATCH_HEIGHT, 0.0)).r*255.0);
        int WEST_MIN_TESS_LEVEL   = int(texture(tessLevels, avgTexCoord+vec2( PATCH_HEIGHT, 0.0)).r*255.0);
        int NORTH_MIN_TESS_LEVEL  = int(texture(tessLevels, avgTexCoord+vec2( 0.0, -PATCH_WIDTH)).r*255.0);
        int SOUTH_MIN_TESS_LEVEL  = int(texture(tessLevels, avgTexCoord+vec2( 0.0,  PATCH_WIDTH)).r*255.0);

        float south = max(MIN_TESS_LEVEL,NORTH_MIN_TESS_LEVEL);
        float west  = max(MIN_TESS_LEVEL,EAST_MIN_TESS_LEVEL);
        float north = max(MIN_TESS_LEVEL,SOUTH_MIN_TESS_LEVEL);
        float east  = max(MIN_TESS_LEVEL,WEST_MIN_TESS_LEVEL);
        // ----------------------------------------------------------------------
        // Step 5: set the corresponding outer edge tessellation levels
        gl_TessLevelOuter[0] = west;
        gl_TessLevelOuter[1] = south;
        gl_TessLevelOuter[2] = east;
        gl_TessLevelOuter[3] = north;

        // ----------------------------------------------------------------------
        // Step 6: set the inner tessellation levels to the max of the two parallel edges
        gl_TessLevelInner[0] = MIN_TESS_LEVEL;
        gl_TessLevelInner[1] = MIN_TESS_LEVEL;
    }
}
