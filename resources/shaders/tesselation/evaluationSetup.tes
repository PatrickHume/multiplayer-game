// https://learnopengl.com/Guest-Articles/2021/Tessellation/Tessellation
// tessellation evaluation shader
#version 410 core

layout (quads, fractional_odd_spacing, ccw) in;

uniform sampler2D heightMap;  // the texture corresponding to our height map
uniform mat4 projection;      // the projection matrix

// received from Tessellation Control Shader - all texture coordinates for the patch vertices
in vec2 TextureCoord[];

// send to Fragment Shader for recording heights to texture.
out float HeightScaled;

// send to Fragment Shader for coloring
out vec2 fragTexCoord;

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point texture coordinates
    vec2 t00 = TextureCoord[0];
    vec2 t01 = TextureCoord[1];
    vec2 t10 = TextureCoord[2];
    vec2 t11 = TextureCoord[3];

    // bilinearly interpolate texture coordinate across patch
    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    fragTexCoord = (t1 - t0) * v + t0;

    // lookup texel at patch coordinate for height and scale + shift as desired
    float Height = texture(heightMap, fragTexCoord).r * 64.0 - 16.0;
    HeightScaled = texture(heightMap, fragTexCoord).r * 255.0;

    // ----------------------------------------------------------------------
    // The shader seems to need gl_in to be read or else it fails...
    // I am not sure as to why.
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    gl_Position = projection * vec4(fragTexCoord[0], fragTexCoord[1], 1.0, 1.0);
}
	